name: Build

permissions: {}

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_INCREMENTAL: 0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      run: rustup update
    - name: configuration (Linux)
      if: runner.os == 'ubuntu'
      run: |
        sudo apt install libxdo-dev

    - name: Build for Desktop Platforms
      run: cargo build --release


    - name: Clean up target directory (Windows only)
      if: runner.os == 'Windows'
      run: |
        Remove-Item -Path "target\release\build" -Recurse -Force
        Remove-Item -Path "target\release\deps" -Recurse -Force
        Remove-Item -Path "target\release\examples" -Recurse -Force
        Remove-Item -Path "target\release\incremental" -Recurse -Force
        Remove-Item -Path "target\CACHEDIR.TAG" -Force
        Remove-Item -Path "target\.rustc_info.json" -Force
        Remove-Item -Path "target\release\.fingerprint" -Recurse -Force
        Remove-Item -Path "target\release\.cargo-lock" -Force


    - name: Clean up target directory (macOS and Linux only)
      if: runner.os != 'Windows'
      run: |
        rm -rf target/release/build
        rm -rf target/release/deps
        rm -rf target/release/examples
        rm -rf target/release/incremental
        rm -f target/CACHEDIR.TAG
        rm -f target/.rustc_info.json
        rm -rf target/release/.fingerprint
        rm -f target/release/.cargo-lock


    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: target/


